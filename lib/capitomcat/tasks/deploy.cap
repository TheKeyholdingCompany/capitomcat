require 'capistrano'
require 'sshkit/backends/netssh'

# Author:: Sunggun Yu

# Capistrano 3 Recipe for Tomcat web application deployment.'
namespace :capitomcat do
  desc <<-DESC
    Capitomcat Recipe for Tomcat web application deployment.

    Required Configurations

    set :use_sudo, true
    role :app, %w{deploy@dev01 deploy@dev02}

    # Remote Tomcat server setting section
    set   :tomcat_user, 'tomcat7'
    set   :tomcat_user_group, 'tomcat7'
    set   :tomcat_port, '8080'
    set   :tomcat_cmd, '/etc/init.d/tomcat7'
    set   :use_tomcat_user_cmd, false
    set   :tomcat_war_file, '/var/app/war/test-web.war'
    set   :tomcat_context_path, '/test-web'
    set   :tomcat_context_file, '/var/lib/tomcat7/conf/Catalina/localhost/test-web.xml'
    set   :tomcat_work_dir, '/var/lib/tomcat7/work/Catalina/localhost/test-web'

    # Deploy setting section
    set   :local_war_file, '/tmp/test-web.war'
    set   :context_template_file, File.expand_path('../templates/context.xml.erb', __FILE__).to_s
    set   :use_parallel, true
    set   :use_context_update, true
  DESC
  task :deploy do
    on roles(:app), in: get_parallelism, wait: 5 do |hosts|
      if fetch(:use_context_update) then
        info 'Upload WAR file'
        upload_war_file

        info 'Stop Tomcat'
        stop_tomcat
        check_tomcat_stopped

        info 'Update Context'
        upload_context_file

        info 'Clean Work directory'
        cleanup_work_dir

        info 'Start Tomcat'
        start_tomcat
        check_tomcat_started
      else
        info 'Stop Tomcat'
        stop_tomcat
        check_tomcat_stopped

        info 'Upload WAR file'
        upload_war_file

        info 'Clean Work directory'
        cleanup_work_dir

        info 'Start Tomcat'
        start_tomcat
        check_tomcat_started
      end
    end
  end

  # Start Tomcat server
  def start_tomcat
    # local variables
    execute_tomcat_cmd('start', 1)
  end

  # Check status whether Tomcat started
  def check_tomcat_started
    # local variables
    tomcat_port = fetch(:tomcat_port)
    _times = 0
    begin
      _times = _times + 1
      info("Check and wait until Tomcat starting up ... #{_times}")
      _netstat = capture("netstat -an | grep \"#{tomcat_port}\" | grep \"LISTEN\" ; echo \"\"")
      info (_netstat)
      sleep(1)
    end until _times > 180 || (_netstat != nil && _netstat.to_s.length > 1)
    if _times > 180
      raise 'Starting Tomcat has failed - timed out'
    end
  end

  # Check status whether Tomcat stopped
  def check_tomcat_stopped
    # local variables
    tomcat_port = fetch(:tomcat_port)
    _times = 0
    begin
      _times = _times + 1
      info("Check and wait until Tomcat stopping ... #{_times}")
      _netstat = capture("netstat -an | grep \"#{tomcat_port}\" | grep \"LISTEN\" ; echo \"\"")
      sleep(1)
    end until _times > 180 || _netstat == nil || _netstat.to_s.length == 0
    if _times > 180
      raise 'Stopping Tomcat has failed - timed out'
    end
  end

  # Stop Tomcat server
  def stop_tomcat
    execute_tomcat_cmd('stop', 1)
  end

  # Upload the WAR file
  def upload_war_file
    # local variables
    upload_user = fetch(:user)
    local_war_file = fetch(:local_war_file)
    tomcat_war_file = fetch(:tomcat_war_file)
    tomcat_user = fetch(:tomcat_user)

    if File.exists?(local_war_file)
      # Setup file name
      temp_dir = Pathname.new('/tmp')
      temp_file = File.basename(tomcat_war_file)
      tmp_war_file = temp_dir.join(temp_file)
      tmp_war_file = timestamp_filename(tmp_war_file)
      # Clean remote file before uploading
      remove_file_if_exist(upload_user, tmp_war_file)
      # Upload WAR file into temp dir
      upload! local_war_file, tmp_war_file
      # Move tmp WAR file to actual path
      clean_after_copy(tmp_war_file, tomcat_war_file, tomcat_user)
    else
      raise("Local WAR file does not existing. : #{local_war_file}")
    end
  end

  # Generate context.xml file string from ERB template file and bindings
  def get_context_template
    # local variables
    context_template_file = fetch(:context_template_file)

    if !File.exists?(context_template_file)
      raise('Context template file does not existing.')
    end

    # local variables for erb file
    tomcat_context_path = fetch(:tomcat_context_path)
    tomcat_war_file = fetch(:tomcat_war_file)
    info ("#{tomcat_context_path}, #{tomcat_war_file}")

    template_file = File.read(File.expand_path(context_template_file, __FILE__))
    template = ERB.new(template_file)
    return template.result(binding)
  end

  # Upload context template string to remote server
  def upload_context_file
    # local variables
    upload_user = fetch(:user)
    tomcat_context_file = fetch(:tomcat_context_file)
    tomcat_user = fetch(:tomcat_user)
    context_template = get_context_template

    temp_upload_file = '/tmp/' + File.basename(tomcat_context_file)
    temp_upload_file = timestamp_filename(temp_upload_file)
    remove_file_if_exist upload_user, temp_upload_file
    contents = StringIO.new(context_template)
    upload! contents, temp_upload_file
    clean_after_copy(temp_upload_file, tomcat_context_file, tomcat_user)
  end

  # Clean-up work directory
  def cleanup_work_dir
    # local variables
    tomcat_work_dir = fetch(:tomcat_work_dir)
    tomcat_user = fetch(:tomcat_user)

    if test "[ -d #{tomcat_work_dir} ]"
      within(tomcat_work_dir) do
        execute :sudo, '- u', tomcat_user, 'rm -rf', tomcat_work_dir
      end
    else
      warn('Tomcat work directory does not existing.')
    end
  end

  # Get Parallelism
  # @return :parallel or :sequence
  def get_parallelism
    if fetch(:use_parallel) == true then
      return :parallel
    else
      return :sequence
    end
  end

  # Get sudo user for tomcat command
  # @return -u and sudo user name for tomcat command. if :use_tomcat_user_cmd is false, it will return '-u root'
  def get_sudo_user_tomcat_cmd
    if fetch(:use_tomcat_user_cmd) == true then
      return "-u #{fetch(:tomcat_user)}"
    else
      return '-u root'
    end
  end

  # Copy the file and remove after copy
  def clean_after_copy (file, destination, sudo_user)
    # Change permission
    execute :chmod, '666', file

    # Copy file to destination
    target_dir = File.dirname(destination)
    if test "[ -d #{target_dir} ]"
      within target_dir do
        execute :sudo, '-u', sudo_user, :cp, file, destination
      end
    else
      warn("Target directory is not existing. Capitomcat will try mkdir for target directory. : #{target_dir}")
      execute :sudo, '-u', sudo_user, :mkdir, '-p', target_dir
      within(target_dir) do
        execute :sudo, '-u', sudo_user, :cp, file, destination
      end
    end
    if test "[ -e #{file} ]"
      execute :rm, '-f', file
    else
      warn('File to remove is not existing.')
    end
  end

  # Remove file if exist
  # @param [String] user
  # @param [String] file
  def remove_file_if_exist (user, file)
    if test "[ -e #{file} ]"
      execute :sudo, :chown, user, file
      execute :rm, '-f', file
    else
      warn('Target file to remove is not existing.')
    end
  end

  # Add timestamp to filename
  def timestamp_filename(file)
    dir = File.dirname(file)
    base = File.basename(file, '.*')
    time = Time.now.to_i
    ext = File.extname(file)
    File.join(dir, "#{base}-#{time}#{ext}")
  end

  # Execute the Tomcat command
  # it executes the Tomcat command in background. and sleeps for several sec after executing.
  def execute_tomcat_cmd(arg, sleep)
    # local variables
    tomcat_cmd = fetch(:tomcat_cmd)
    execute("echo `nohup sudo #{get_sudo_user_tomcat_cmd} #{tomcat_cmd} #{arg}& > /dev/null 2>&1` && sleep #{sleep}")
  end
end