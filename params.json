{"name":"Capitomcat","tagline":"Capistrano Recipe for Tomcat Deploy","body":"Capistrano Recipe for Tomcat\r\n========================\r\n\r\n##Installation\r\nTo use Capitomcat in your Capistrano script, you need install as RubyGem\r\n\r\n###Install Ruby\r\nPlease refer to [Download Ruby](http://www.ruby-lang.org/en/downloads/) page on the Ruby official website.\r\n###Install RubyGems\r\nPlease refer to [Download RubyGems](http://rubygems.org/pages/download) page on the RubyGems official website.\r\n###Install Capistrano\r\n<pre>\r\n$ gem install capistrano\r\n$ gem install capistrano-ext\r\n</pre>\r\n###Install Capitomcat\r\n* Check-out the source code\r\n<pre>\r\n$ git clone git@github.com:sunggun-yu/capitomcat.git\r\n</pre>\r\n* Build gem\r\n<pre>\r\n$ cd capitomcat\r\n$ gem build capitomcat.gemspec\r\n</pre>\r\n* Install gem\r\n<pre>\r\n$ gem install capitomcat\r\n</pre>\r\n\r\n##Configuration\r\nYou have to add the following options in your `Capfile` or `deploy.rb`\r\n<pre>\r\nrole :app\r\nset  :user\r\nset  :password\r\nset  :tomcat_user\r\nset  :tomcat_cmd_user\r\nset  :tomcat_port\r\nset  :local_war_file\r\nset  :context_template_file\r\nset  :context_name`\r\nset  :remote_docBase\r\nset  :remote_context_file \r\nset  :remote_tomcat_cmd\r\nset  :remote_tomcat_work_dir\r\nset  :stages\r\n</pre>\r\n* `:app` - The application servers that you want to deploy\r\n* `:user` - User name which is going to run Capistrano script.\r\n* `:password` - Password of `:user`.\r\n* `:tomcat_user` - The owner of Tomcat home directory.\r\n* `:tomcat_cmd_user` - The user that runs tomcat scripts : ex) /etc/init.d/tomcat\r\n* `:tomcat_port` - Port number of Tomcat server. this value is needed to check whether Tomcat process is running.\r\n* `:local_war_file` - The WAR file which will upload to remote tomcat server.\r\n* `:context_template_file` - Path for the template file in your local, which is application's Tomcat context. also, following ERB variable are should be included in the template file.\r\n\t* context.xml.erb\r\n<pre>\r\n&lt;Context path=\"/<%= context_name %>\" docBase=\"<%= remote_docBase %>\" /&gt;\r\n</pre>\r\n * `<%= context_name %>` - This variable is for the ***path*** attribute in the context file. It will be replaced to `:context_name`\r\n * `<%= remote_docBase %>` - This variable is for the ***docBase*** attribute in the context file.It will be replaced to `:remote_docBase`\r\n- `:context_name` - Root context name of application.\r\n- `:remote_docBase` -  The pathname to the web application archive file (if this web application is being executed directly from the WAR file)\r\n- `:remote_context_file` -  Application's context file path for Tomcat on your remote servers. basically, context file is located in `/your/tomcat/home/conf/Catalina/localhost/appname.xml`\r\n- `:remote_tomcat_cmd` -  Tomcat's star, stop command. for example, `/etc/init.d/tomcat` or `/your/tomcat/home/bin/catalina.sh` can be used. please make sure not to include `start` or `stop` parameter.\r\n- `:remote_tomcat_work_dir` - Tomcat work directory for application. this directory will be used at `capitomcat:cleanWorkDir` task\r\n\r\n### Multistage setting\r\nIf you want to use Multistage deployment, You should add following option in your `Capfile` or `deploy.rb`\r\nalso, please refer to [Multistage Extension](https://github.com/capistrano/capistrano/wiki/2.x-Multistage-Extension).\r\n- `:stages` -  \r\n<pre>\r\n# Application Stage Section\r\nset :stages, %w(dev stg prod)\r\n</pre>\r\n\r\n### Examples\r\n#### Single Stage\r\n/your/capistrano/project/***Capfile***\r\n```\r\nrequire 'capitomcat'\r\n\r\n# Application host section\r\nrole  :app, \"dev01\", \"dev02\"\r\n\r\n# User section\r\nset   :user, \"stg\"\r\nset   :password, \"password\"\r\nset   :tomcat_user, \"tomcat\"\r\nset   :tomcat_cmd_user, \"root\"\r\n\r\n# Local file section\r\nset   :local_war_file, \"/tmp/app.war\"\r\nset   :context_template_file, \"./template/context.xml.erb\"\r\n\r\n# Remote setting section\r\nset   :context_name, \"app\"\r\nset   :remote_docBase, \"/tmp/test/earl/war/abc.war\"\r\nset   :remote_context_file, \"/tmp/test/tomcat/conf/Catalina/localhost/app.xml\"\r\nset   :remote_tomcat_cmd, \"/tmp/test/etc/init.d/tomcat7\"\r\nset   :remote_tomcat_work_dir, \"/opt/tomcat/work/Catalina/localhost/app\"\r\n```\r\n\r\n#### Multi Stage\r\nProject structure.\r\n```\r\n/ your/capistrano/project/\r\n|-- config\r\n|   |-- deploy\r\n|   |   |-- dev.rb\r\n|   |   |-- stg.rb\r\n|   |   `-- prod.rb\r\n|   `-- deploy.rb\r\n`-- Capfile\r\n```\r\nAlso, the file name under config/deploy are should be matched in  `set :stages`\r\n\r\n* /your/capistrano/project/***Capfile***\r\n\r\n  ```\r\n  require 'capitomcat'\r\n  require 'capistrano/ext/multistage'\r\n\r\n  # Application Stage Section\r\n  set :stages, %w(dev stg prod)\r\n\r\n  # User section\r\n  set   :user, \"stg\"\r\n  set   :password, \"password\"\r\n  set   :tomcat_user, \"tomcat\"\r\n  set   :tomcat_cmd_user, \"root\"\r\n\r\n  # Local file section\r\n  set   :local_war_file, \"/tmp/app.war\"\r\n  set   :context_template_file, \"./template/context.xml.erb\"\r\n\r\n  # Remote setting section\r\n  set   :context_name, \"app\"\r\n  set   :remote_docBase, \"/tmp/test/earl/war/abc.war\"\r\n  set   :remote_context_file, \"/tmp/test/tomcat/conf/Catalina/localhost/app.xml\"\r\n  set   :remote_tomcat_cmd, \"/tmp/test/etc/init.d/tomcat7\"\r\n  set   :remote_tomcat_work_dir, \"/opt/tomcat/work/Catalina/localhost/app\"\r\n  ```\r\n\r\n* /your/capistrano/project/***config/deploy/dev.rb***\r\n\r\n  ```\r\n  # Application host section for DEV\r\n  role  :app, \"dev-host-1\", \"dev-host-2\"\r\n  ```\r\n\r\n*  /your/capistrano/project/***config/deploy/stg.rb***\r\n\r\n  ```\r\n  # Application host section for stg\r\n  role  :app, \"stg-host-1\", \"stg-host-2\"\r\n  ```\r\n\r\n* /your/capistrano/project/***config/deploy/prod.rb***\r\n\r\n  ```\r\n  # Application host section for Production\r\n   role  :app, \"prod-host-1\", \"prod-host-2\"\r\n ```\r\n\r\n##Available Tasks\r\nTo get a list of all capistrano tasks, run `cap -T` with user password:\r\n<pre>\r\ncap capitomcat:cleanWorkDir  # Cleaning-up Tomcat work directory\r\ncap capitomcat:start         # Start capitomcat.\r\ncap capitomcat:stop          # Stop capitomcat.\r\ncap capitomcat:updateContext # Update and upload context file\r\ncap capitomcat:uploadWar     # Upload WAR file\r\n</pre>\r\n\r\n### capitomcat:cleanWorkDir\r\nThis Task will remove Application's Tomcat work directory. Please make sure you should start/restart Tomcat after this task has executed.\r\n### capitomcat:start\r\nThis Task will start your Tomcat server using `:remote_tomcat_cmd` command.\r\nIf you have `set :remote_tomcat_cmd, '/etc/init.d/tomcat7'` and `set :tomcat_cmd_user, 'root'` in your Capfile or deploy.rb file then the Task will execute `sudo -p <:password> -u root /etc/init.d/tomcat7 start` commnad on your remote servers which are setted in `role :app`.\r\n### capitomcat:stop\r\nThis Task will stop your Tomcat server using `:remote_tomcat_cmd` command.\r\nIf you have `set :remote_tomcat_cmd, '/user/local/tomcat7/bin/catalina.sh'` and `set :tomcat_cmd_user, 'tomcat'` in your Capfile or deploy.rb file then the Task will execute `sudo -p <:password> -u tomcat /user/local/tomcat7/bin/catalina.sh stop` commnad on your remote servers which are setted in `role :app`.\r\n### capitomcat:updateContext\r\nThis Task will generate context file from your context template file. and Upload the generated context file to `:remote_context_file`\r\n### capitomcat:uploadWar\r\nThis Task will upload the `:local_war_file` to `:remote_docBase` \r\n\r\n##Usage\r\nTo use capitomcat gem, You need to create your own Capistrano script.\r\nYou can create Capistrano project structure and default files from scratch to run `capify .`\r\n```\r\n$ mkdir -p /your/capistrano/project\r\n$ cd /your/capistrano/project\r\n$ capify .\r\n$ tree\r\n\r\n/ your/capistrano/project/\r\n|-- config\r\n|   `-- deploy.rb\r\n`-- Capfile\r\n```\r\nadd settings into your Capfile or deploy.rb file. and you can execute capitomcat recipe like this.\r\n```\r\n$ cap capitomcat:stop\r\n```\r\n\r\nAlso, you can combine tasks as a one task by creating new task inside the your Capfile or deploy.rb file.\r\n```\r\nrequire 'capitomcat'\r\n\r\ndesc \"Release Task for myjob\"\r\nnamespace :myapp do\r\n  task :release, :roles => :app do\r\n    capitomcat.stop\r\n    capitomcat.uploadWar\r\n    capitomcat.updateContext\r\n    capitomcat.cleanWorkDir\r\n    capitomcat.start\r\n  end\r\nend\r\n```\r\n\r\n### Execute tasks serially\r\nCapistrano performs the task parallel, So in the above case, if you have multiple server each task will be performed for each servers.\r\n```\r\n# host1, host2\r\n\r\nstop ==> host1\r\nstop ==> host2\r\n\r\nuploadWar ==> host1\r\nuploadWar ==> host2\r\n\r\n...\r\n```\r\n\r\nif you do perform release like below, use serial_task function.\r\n```\r\n# host1, host2\r\n\r\nstop ==> host1\r\nuploadWar ==> host1\r\nupdateContext ==> host1\r\nstart ==> host1\r\n\r\nstop ==> host2\r\nuploadWar ==> host2\r\nupdateContext ==> host2\r\nstart ==> host2\r\n```\r\n\r\n```\r\nrequire 'capitomcat'\r\n\r\ndesc \"Release Task for myjob\"\r\nnamespace :myapp do\r\n  task :release, :roles => :app do\r\n    serial_task do\r\n      capitomcat.stop\r\n      capitomcat.uploadWar\r\n      capitomcat.updateContext\r\n      capitomcat.cleanWorkDir\r\n      capitomcat.start\r\n    end\r\n  end\r\nend\r\n```\r\n\r\n### Perform multistage task\r\nIf you have multistage setting, you can perform the task as like below.\r\n```\r\ncap prod myapp:release\r\n```\r\n\r\n&hearts;For more details, please refer to example projects.&hearts;\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}